name: use the reusable workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

# NB: you can skip a workflow run for a particular commit by including [skip ci] or [ci skip] in the commit message

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        continue-on-error: true
        run: npm test

  #understand contexts : https://docs.github.com/en/actions/reference/workflows-and-actions/contexts#needs-context
  build:
    needs: test
    runs-on: ubuntu-latest
    # if you want to pass data between jobs you need to declare the
    # here we set the output value for the job using an expression
    outputs: 
            # this is an identifier you declare , since its the one you will later access
      script-file: ${{steps.step_file_name.outputs.myFilename}} 
            # this is how you access the output of a step in a job
            # steps.<step_id>.outputs.<output_name>
            # step_id is the ID you set for the step below ( step_file_name)
            # output_name is the name of the output you set in that step ( also step_file_name)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Run build script
        run: npm run build

      - name: Output filename of Js filename
        id: step_file_name #this ID is how we access the output of this step
        run:  find dist/assets/*.js -type f -execdir echo 'myFilename={}' >> $GITHUB_OUTPUT ';'

        # we use the script-file above ( this is a custom name and you can name it whatever you want)
        # the GITHUB_OUTPUT is a special variable that allows you to set output values for steps

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-results
          path: dist
          #path: |
           # dist
            #package.json

# in the deploy step we will use that reusable workflow we created in reusable.yml
# to use this we provide the full path relative to the root of the repository
  deploy:
    needs: build
    uses: ./.github/workflows/reusable.yml
    with:
      # here we provide the input value for the reusable workflow
      # this is the name of the artifact we want to download - this is dynamic now since we are passing it as an input
       artifact-name: build-results 
      # if we did not provide a value here it would default to build-results since that is what we set in reusable.yml

    # we can also access the output of the reusable workflow here as well
  
  print_reusable_outcomes:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: print outcome from reusable workflow
        run: echo " the outcome from the reusable workflow was ${{needs.deploy.outputs.result}}" # we need deploy because thats where the outcome of the reusable workflow is being called
   

