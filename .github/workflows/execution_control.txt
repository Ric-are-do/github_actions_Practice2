name: executon control workflow
on:
  push:
    branches:
      - main
      - dev
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules ${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
      # Adding an if condition so we can skip npm ci if the modules are already cached
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        # here I add the if key , then confirm that the next step regarding uploading the test report should only happen if we have a failing test 
        # we add an Id to this run tests step so that we check if the step failed or not and then we use that in our if expression by the upload test results step 
      - name: Run tests
        id: run_tests
        run: npm test
        # add this step below informing the pipeline to continue on error 

      - name: upload test results
      # this step will only run if the tests fail
      # we look in the step context -> Get the id for that step that ran -> check the outcome of that step to see if it passed or failed 
      # When the test fails in the run tests , then github will do its defait behavior of stopping the workflow but we dont wa that to happen , we want it to continue to the next step so we can execute the upload test results step
      # to do this we add a special function that says the stem when a step fails failure () then we combine it with && to the steps if statmeent that checks if the outcome of the run tests step is failure
      # 
        if: ${{ failure() && steps.run_tests.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          ## upload the artofoact for the package lock.json 
          path: package-lock.json

      - name: Output information
        if: ${{ always() }}
        run: ls
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |        
          echo "..."

## add a Job that only runs if another job fails - then it will run this job and then echo the github context
#note that this will be skipped since its evaluated in parallel to the other jobs so you do need to add the depends on the test and deploy jobs to run first 
  report:
    needs: [test, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |
          echo "The test job failed, please check the logs"
          echo "${{ toJSON(github) }}"